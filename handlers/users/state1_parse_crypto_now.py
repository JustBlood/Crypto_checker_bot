from aiogram import types

from keyboards.default import continue_kb
from loader import dp
from parsing.crypto_parser_1 import parser_1
from states import CheckCryptoNow

import logging
logging.basicConfig(level=logging.INFO)

@dp.message_handler(state=CheckCryptoNow.inputing_crypto)
async def parse_crypto_now(message: types.Message):
    curr_state = parser_1(message.text.upper())
    if curr_state == 'error empty result':
        logging.info(msg=f'–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç—ã –Ω–µ —É–¥–∞–ª—Å—è. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')
        await message.answer('üò£ –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã...', reply_markup=continue_kb)
    elif curr_state == 'error status code':
        logging.info(msg=f'–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç—ã –Ω–µ —É–¥–∞–ª—Å—è, —Å–∞–π—Ç –∫—Ä–∏–ø—Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')
        await message.answer('üöß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
    elif type(curr_state) == dict:
        logging.info('–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω')
        await message.answer(f"üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {message.text.upper()} —Å–µ–π—á–∞—Å –ø—Ä–æ–¥–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω–µ: {curr_state['close']}", reply_markup=continue_kb)
    else:
        await message.answer('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')
    await CheckCryptoNow.continue_menu.set()