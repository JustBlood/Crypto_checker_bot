from aiogram import types
from aiogram.dispatcher import FSMContext

from DB_work.get_db_names import get_db_names
from DB_work.get_crypto import save_crypto_data_in_file
from keyboards.default import main_kb
from keyboards.default.keyboard_continue_menu import continue_kb
from loader import dp
from states import EnterCrypto

from parsing.crypto_parser_60 import main_parser_60

@dp.message_handler(state=EnterCrypto.inputing_crypto)
async def get_crypto_file(message: types.Message, state: FSMContext):
    """–¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏–ø—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –µ—ë –¥–∞–Ω–Ω—ã—Ö"""

    if message.text.lower() in get_db_names().lower():
        await message.answer('üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è csv —Ñ–∞–π–ª...')
        save_crypto_data_in_file(message)
    else:
        await message.answer('‚è≥ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ, —á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã...')
        status = main_parser_60(message.text.upper())
        if status == 'success':
            await message.answer('üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è csv —Ñ–∞–π–ª...')
            save_crypto_data_in_file(message)
        else:
            await message.answer('üòî –î–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', reply_markup=main_kb)
            await state.finish()
            return

    await message.answer_document(open(f'files_to_send/{message.text}.csv', 'rb'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=continue_kb)
    await EnterCrypto.continue_menu.set()
